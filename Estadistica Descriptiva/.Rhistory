setwd("~/Cursos/Curso completo de Estadística descriptiva - RStudio y Python/codigo/R/Estadistica Descriptiva")
save.image("~/Cursos/Curso completo de Estadística descriptiva - RStudio y Python/codigo/R/Estadistica Descriptiva/data.RData")
install.packages("tidyverse",dep=True)
install.packages("tidyverse",dep=TRUE)
library(tidyverse)
install.packages("magic",dep=TRUE)
library(magic)
magic(6)
installed.packages()
install.packages(c("abind", "askpass", "backports", "bit", "bit64", "brio", "broom", "bslib", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "digest", "evaluate", "farver", "fontawesome", "fs", "ggplot2", "glue", "gtable", "highr", "jsonlite", "knitr", "lubridate", "openssl", "pillar", "pkgbuild", "pkgload", "ps", "ragg", "Rcpp", "RcppArmadillo", "reprex", "rlang", "rmarkdown", "rstudioapi", "stringi", "sys", "systemfonts", "testthat", "textshaping", "tinytex", "uuid", "waldo", "withr", "xfun", "yaml"))
1 + 1
2 * (3+1)
1+1; 2+2; 3+3
1
2^4
6/3
7/3
7%/%3
7%%3 #Resto
2*(3+5)/2
2/3+5
2%/%3
2^-4
725 %/% 7
725 %% 7
pi
2*pi
pi^2
2^pi
Inf
-Inf
NA
NaN
5/0
0/0
2^50
2^-15
c(2^30, 2^(-15), 1, 2,3/2)
sqrt(25)
log(pi)
abs(-pi)
exp(1)
#factorial:
factorial(7)
factorial(-5)
factorial(0)
#Choose(n,m)
choose(5,3)
log(32,2)
6^log(4,6)
log(4^6,4)
#Choose(n,m)
choose(5,3)|
choose(3,1)
#Choose(n,m)
choose(5,3)|
choose(3,1)
choose(1,3)
choose(3,1)
cos(60)
cos(60*pi/180)
sin(60*pi/180)
?sin
sinpi(1/2)
tan(pi)
tan(pi/2)
asin(0.8660254)
asin(0.8660254)*180/pi
print(sqrt(2),10)
round(sqrt(2))
floor(sqrt(2))
ceiling(sqrt(2))
trunc(sqrt(2))
2^50
print(2^50,15)
print(2^50,2)
round(sqrt(2),5)^2
round(1.35,1)
round(sqrt(2),0)
round(digits = 5, sqrt(2))
x = (pi^2)/2
x
y <- cos(pi/4)
y
sin(pi/4) + cos(pi/4) -> z
z
edad <- 30
nombre = "Juan Gabriel"
nombre
HOLA = 1
hola = 5
pi.4 = 4*pi
pi.4x
pi.4
x = x^2
x
x = sqrt(x)
x
f = function(x){ x^3-(3*x)*sin(x)}
f(4)
f(8)
f(pi/2)
g -> function(x){x^2}
g <- function(x){x^2}
g(5)
producto <- function(x,y){
x*y
}
producto(4,6)
g <- function(x,y,z){
exp(x^2+y^2)*sin(z)
}
g(6)
g(6,3,5)
ls()
rm(g)
rm(g)
ls() # Enlista las variables utilizadas
rm(list = ls() )
opBasic = function(a,b){
print("Suma")
print(a+b)
print("resta")
print(a-b)
print("Multiplicacion")
print(a*b)
print("Division")
print(a/b)
print("Cociente de la division entera")
print(a%/%b)
print("Resto de la division entera")
print(a%%b)
}
opBasic(4,6)
opBasic = function(a,b){
print("Suma")
print(a+b)
print("resta")
print(paste(sprintf("i% - i% = ",a,b),a-b))
print(paste(sprintf("i% - i% = ",b,a),b-a))
print(a-b)
print("Multiplicacion")
print(a*b)
print("Division")
print(a/b)
print("Cociente de la division entera")
print(a%/%b)
print("Resto de la division entera")
print(a%%b)
}
opBasic(4,6)
opBasic = function(a,b){
print("Suma")
print(a+b)
print("resta")
print(paste(sprintf("%i - %i = ",a,b),a-b))
print(paste(sprintf("%i - %i = ",b,a),b-a))
print(a-b)
print("Multiplicacion")
print(a*b)
print("Division")
print(a/b)
print("Cociente de la division entera")
print(a%/%b)
print("Resto de la division entera")
print(a%%b)
}
opBasic(4,6)
?paste
3+2i
class(3+2i)
(3+2i)*5
(3+2i)*(-1+3i)
(3+2i)/(-1+3i)
complex(real = pi, imaginary = sqrt(2)) -> z1
z1
sqrt(as.complex(-5))
sqrt(3+2i)
exp(3+2i)
sin(3+2i)
cos(3+2i)
# Modulo = sqrt(Re(z)^2 + Im(z)^2)
Mod(z1)
# Argumento = arctan(Im(z)/Re(z))
#  = arccos(Re(z)/Mod(z))
#  = arcsin(Im(z)/Mod(z))
Arg(z1)
#Arg va de (-pi, pi]
Arg(-1+0i)
#Conjugado = Re(z) - Im(z)i
Conj(z1)
# Parte real:
Re(z1)
# Parte Imaginaria:
Im(z1)
#### z = Mod(z) * (cos(Arg(z))+ sin(Arg(z))i)
complex(modulus = 2, argument = pi/2) ->  z2
z2
Mod(z2)
Arg(z2)
pi/2
install.packages("languageserver")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
install.packages("languageserver")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel',force = TRUE)
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
